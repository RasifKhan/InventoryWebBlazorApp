@page "/product"
@using Atl_Inv_Business.Repository.IRepository;
@using Atl_Inv_Common;

@inject IProductInfoSetupRepository _productInfoSetupRepository;
@inject IJSRuntime _jsRuntime;
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@*@attribute [Authorize(Roles =SD.Role_Admin)]*@

@attribute [Authorize(Roles = $"{SD.Role_SuperAdmin},{SD.Role_Admin}")]

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>



<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
    <div class="col-12 p-3">
        @if(Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Action</th>
                       @* <th>Shop Favorites</th>
                        <th>Customer Favorites</th>
                        <th>Category</th>*@
                    </tr>
                </thead>
                <tbody>
                    @foreach(var prod in Products)
                    {
                        <tr>
                            <td>
                                @prod.ProductName
                            </td>
                           @* <th>
                                <input type="checkbox" disabled checked="@prod.ShopFavorites" >
                            </th>
                             <th>
                                <input type="checkbox" disabled checked="@prod.CustomerFavorites" >
                            </th>
                             <th>
                                @prod.Category.Name
                            </th>*@

                            <td>
                                <NavLink href="@($"product/edit/{@prod.ProductId}")" class="btn-primary btn">Edit</NavLink>
                               
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(prod.ProductId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        else
        {
            if(IsLoading)
            {
                //Loading gif
                <div class="text-center">
                    <img src="/images/Glass spheres.gif">
                </div>
            }
            else 
            {
                //no records
                <p>No Records Found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<ProductInfoSetupDTO> Products { get; set; } = new List<ProductInfoSetupDTO>();
    private bool IsLoading { get; set; } 

    private int DeleteProductId {get;set;}=0;

   


    //[CascadingParameter]
    //public Task <AuthenticationState> AuthenticationState { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    var authState = await AuthenticationState;
    //    if(!authState.User.Identity.IsAuthenticated)

    //    {
    //        var uri = new Uri(_navigationManager.Uri);
    //        _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}",forceLoad:true);
    //    }

    //    else
    //    {
    //        if(!authState.User.IsInRole(Ecommerce_Common.SD.Role_Admin))
    //        {
    //            _navigationManager.NavigateTo("/ErrorPage");
    //        }
    //    }
    //}
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadProducts();
        }
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productInfoSetupRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal"); //This Function doesn't return anything thats why InvokeVoidAsync is used//
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if(isConfirmed && DeleteProductId!=0) 
        {
            ProductInfoSetupDTO product = await _productInfoSetupRepository.Get(DeleteProductId);
            //delete
            //await Task.Delay(5000);  
            if (!product.ImmageUrl.Contains("Default_image.png"))
            {
                _fileUpload.DeleteFile(product.ImmageUrl);
                //For deleting immage from Project root folder
                string projectRootPath = AppContext.BaseDirectory;
                string physicalImagePath = Path.Combine(projectRootPath, product.ImmageUrl);
                if (File.Exists(physicalImagePath))
                {
                    File.Delete(physicalImagePath);
                }
            }
            await _productInfoSetupRepository.Delete(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Product Deleted Successfully");
            await LoadProducts();
            await  _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
