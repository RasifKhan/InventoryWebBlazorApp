@page "/setupmt"
@using Atl_Inv_Business.Repository.IRepository;
@using Atl_Inv_Model;
@inject  ISetupMt_DataRepository _setupMt_DataRepository;
@inject IJSRuntime _jsRuntime
@attribute [Authorize(Roles = $"{SD.Role_SuperAdmin},{SD.Role_Admin}")]

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmTask_Click"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">List of Setup Master Data</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="setupmt/create" class="btn btn-primary form-control">Add New Seteup MT</a>
    </div>
    <div class="col-12 p-3">
        @if (SetupMtDatas.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var objSetupMt in SetupMtDatas)
                    {
                        <tr>
                            <td>
                                @objSetupMt.SetupMT_Data
                            </td>
                            <td>
                                        <NavLink href="@($"setupmt/edit/{objSetupMt.SetupMT_Id}")" class="btn-primary btn">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objSetupMt.SetupMT_Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //Loading gif
                <div class="text-center">
                    <img src="/images/Glass spheres.gif">
                </div>
            }
            else
            {
                //no records
                <p>No Records Found.</p>
            }
        }
    </div>
</div>
@code {
    private IEnumerable<SetupMt_DataDTO> SetupMtDatas { get; set; } = new List<SetupMt_DataDTO>();
    private bool IsLoading { get; set; }
    private int DeleteSetupMt_Id { get; set; } = 0;
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
           
            await LoadSetupMt_Datas();
            }
        }
        private async Task LoadSetupMt_Datas()
        {
            IsLoading = true;
            StateHasChanged();
            SetupMtDatas = await _setupMt_DataRepository.GetAll();
            IsLoading = false;
            StateHasChanged();
        }
    
    private void HandleDelete(int id)
    {
        DeleteSetupMt_Id = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal"); //This Function doesn't return anything thats why InvokeVoidAsync is used//
    }
    public async Task ConfirmTask_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteSetupMt_Id != 0)
        {
            //delete
            //await Task.Delay(5000);
            await _setupMt_DataRepository.Delete(DeleteSetupMt_Id);
            await LoadSetupMt_Datas();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}

