@page "/reportPage"
@inject IJSRuntime js
@inject NavigationManager _navigation

<h1>Rdlc Report</h1>
<br>
<input type="text" @bind="productName" placeholder="Enter Product Name" />
<button id="btnGenerate" class="btn btn-primary" @onclick="OpenReport1">PDF1</button>
<button id="btnGenerate" class="btn btn-primary" @onclick="OpenReport2">xls1</button>

<br/>

<br>
<input type="text" @bind="quotationNo" placeholder="Enter Quotation No" />
<button id="btnGenerate" class="btn btn-primary" @onclick="QuotationReportPdf">PDF2</button>
<button id="btnGenerate" class="btn btn-primary" @onclick="QuotationReportxls">xls2</button>
<br/>
@*<button id="btnGenerate" class="btn btn-primary" @onclick="OpenReport2">xls</button>*@

@code {
    private string? productName;
    private string? quotationNo;

    private async void OpenReport1()
    {
        string baseUri = _navigation.BaseUri;
        string url = $"{baseUri}api/Reportss/GetProductReport?reportType=1";
        if (!string.IsNullOrEmpty(productName))
        {
            url += $"&productName={productName}";
        }
        await js.InvokeVoidAsync("open", url, "_blank");
    }


    private async void OpenReport2()
    {


        string baseUri = _navigation.BaseUri;
        string url = $"{baseUri}api/Reportss/GetProductReport?reportType=2";


        //string url = $"http://localhost:49352/api/ReportOrderInfor/GetNewReport?reportType=2";
        if (!string.IsNullOrEmpty(productName))
        {
            url += $"&productName={productName}";
        }
        await js.InvokeVoidAsync("open", url, "_blank");
    }


    private async void QuotationReportPdf()
    {
        string baseUri = _navigation.BaseUri;
        string url = $"{baseUri}api/Reportss/GetQuotaionReport?reportType=1";
        if (!string.IsNullOrEmpty(quotationNo))
        {
            url += $"&quotationNo={quotationNo}";
        }
        await js.InvokeVoidAsync("open", url, "_blank");
    }

    private async void QuotationReportxls()
    {
        string baseUri = _navigation.BaseUri;
        string url = $"{baseUri}api/Reportss/GetQuotaionReport?reportType=2";
        if (!string.IsNullOrEmpty(quotationNo))
        {
            url += $"&quotationNo={quotationNo}";
        }
        await js.InvokeVoidAsync("open", url, "_blank");
    }
}








@*@page "/reportPage"
@inject IJSRuntime js
@inject NavigationManager _navigation

<h1>Rdlc Report</h1>
<input type="text" @bind="productName" placeholder="Enter Product Name" />
<button id="btnGenerate" class="btn btn-primary" @onclick="OpenReport1">PDF1</button>

@code {
    private string? productName;

    private async void OpenReport1()
    {
        string url = _navigation.ToAbsoluteUri($"api/Reportss/GetProductReport?reportType=1").ToString();
        if (!string.IsNullOrEmpty(productName))
        {
            url += $"&productName={productName}";
        }
        await js.InvokeVoidAsync("open", url);
    }
}
*@



@*@page "/reportPage"
@inject IJSRuntime js
@inject NavigationManager _navigation

<h1>RDLC Report</h1>

<input type="text" @bind="productName" placeholder="Enter Product Name" />
<button id="btnGeneratePDF" class="btn btn-primary" @onclick="OpenReportAsPDF">Generate PDF</button>
<button id="btnGenerateExcel" class="btn btn-secondary" @onclick="OpenReportAsExcel">Generate Excel</button>

@code {
    private string? productName;

    private async void OpenReportAsPDF()
    {
        string url = ConstructReportUrl(1);
        await OpenReport(url);
    }

    private async void OpenReportAsExcel()
    {
        string url = ConstructReportUrl(2);
        await OpenReport(url);
    }

    private string ConstructReportUrl(int reportType)
    {
        // Remove trailing slash from BaseUri if present
        string baseUri = _navigation.BaseUri.TrimEnd('/');

        // Construct the full URL
        string url = $"{baseUri}/api/Reportss/GetProductReport?reportType={reportType}";

        if (!string.IsNullOrEmpty(productName))
        {
            url += $"&productName={productName}";
        }

        return url;
    }

    private async Task OpenReport(string url)
    {
        try
        {
            await js.InvokeVoidAsync("open", url, "_blank");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while opening the report: {ex.Message}");
            // Optionally, use a Blazor modal or alert to display the error to the user.
        }
    }
}

*@



@*@page "/reportPage"
@inject IJSRuntime js
@inject NavigationManager _navigation

<h1>RDLC Report</h1>

<!-- Input for product name -->
<input type="text" @bind="productName" placeholder="Enter Product Name" />

<!-- Button to generate PDF report -->
<button id="btnGeneratePDF" class="btn btn-primary" @onclick="OpenReportAsPDF">Generate PDF</button>

<!-- Button to generate Excel report -->
<button id="btnGenerateExcel" class="btn btn-secondary" @onclick="OpenReportAsExcel">Generate Excel</button>

@code {
    // Bound variable for product name input
    private string? productName;

    // Method to open the report as a PDF
    private async void OpenReportAsPDF()
    {
        // Construct the full URL for the PDF report
        string url = ConstructReportUrl(1);

        // Open the URL in a new browser tab
        await js.InvokeVoidAsync("open", url, "_blank");
    }

    // Method to open the report as an Excel file
    private async void OpenReportAsExcel()
    {
        // Construct the full URL for the Excel report
        string url = ConstructReportUrl(2);

        // Open the URL in a new browser tab
        await js.InvokeVoidAsync("open", url, "_blank");
    }

    // Helper method to construct the full report URL
    private string ConstructReportUrl(int reportType)
    {
        // Base URL using the injected NavigationManager's BaseUri
        string url = $"{_navigation.BaseUri}api/Reportss/GetProductReport?reportType={reportType}";

        // Append the product name parameter if it's not null or empty
        if (!string.IsNullOrEmpty(productName))
        {
            url += $"&productName={productName}";
        }

        return url;
    }
}




*@




























@*@page "/reportPage"
@inject IJSRuntime js
@inject NavigationManager _navigation

<h1>Rdlc Report</h1>
<input type="text" @bind="productName" placeholder="Enter Product Name" />
<button id="btnGenerate" class="btn btn-primary" @onclick="OpenReport1">PDF1</button>

@code {
    private string? productName;
    private DateTime? fromDate;
    private DateTime? toDate;

    //  E:\Rough\ATL_INV_WebApp\Atl_Inv_Server\Controller\ReportsController.cs

    // string url = $"http://localhost:49352/api/ReportOrderInfor/GetNewReport?reportType=1";


    private async void OpenReport1()    //44351   //   server:  44351   //   api:   5100
    {
        //string url = $"Reports/GetProductReport";                     ///10476               string url = $"http://localhost:44351/api/Report/GetProductReport?reportType=1";
        //string baseUrl = _navigation.BaseUri;
        // string baseUrl = "https://localhost:44351/";

        string url = $"http://localhost:44351/api/Reportss/GetProductReport?reportType=1";       //5100
        if (!string.IsNullOrEmpty(productName))
        {
            url += $"&productName={productName}";
        }
        await js.InvokeVoidAsync("open", url);
    }
}
*@


